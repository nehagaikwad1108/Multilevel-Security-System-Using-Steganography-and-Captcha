/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MainGUI;

import Blowfish.EncryptFile;
import Blowfish.key;
import Database.DatabaseConnection;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Insets;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author Mahendra
 */
public class GUI extends javax.swing.JFrame {

    String log = "";
    DatabaseConnection dbcon;
    String filetype;
    FileDialog fd2;
    String path, fn, dn, ipath, ext, ftype;
    Process pd, pe, ps;
    JTextArea tp;
    int buf[];
    int lastRed = 0, lastGreen = 0, lastBlue = 0;

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        setLocationRelativeTo(null);
        txtSelectedFiles.setEditable(false);
        txtSelectedFiles1.setEditable(false);
        txtcoverimg.setEditable(false);
        txtenctext.setEditable(false);
        jTextArea1.setEditable(false);
        jButton3.setEnabled(false);
        jButton4.setEnabled(false);
        jButton6.setEnabled(false);
        jButton10.setEnabled(false);
        jButton7.setEnabled(false);
        jTextArea2.setEditable(false);
        tp = new JTextArea();
        tp.setCaretPosition(0);
        tp.setMargin(new Insets(5, 5, 5, 5));
        Dimension minimumSize = new Dimension(100, 50);
        tp.setMinimumSize(minimumSize);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        txtSelectedFiles = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtoriginalimg = new javax.swing.JLabel();
        txtencryptimg = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtcoverimg = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        txtcover = new javax.swing.JLabel();
        txtfinalimg = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        txttab = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtkey = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txttext = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtenctext = new javax.swing.JTextArea();
        jButton8 = new javax.swing.JButton();
        imagetab = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        txtkey2 = new javax.swing.JTextField();
        jButton9 = new javax.swing.JButton();
        txtoriginalimg1 = new javax.swing.JLabel();
        txtencryptimg1 = new javax.swing.JLabel();
        jButton11 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtSelectedFiles1 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        txtrecdataimg = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtkey1 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jTabbedPane4 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jButton10 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N

        jButton2.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jButton2.setText("Browse");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        txtSelectedFiles.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jLabel1.setText("Select File To be Hide");

        txtoriginalimg.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N

        txtencryptimg.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jLabel2.setText("Original Text");

        jLabel3.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jLabel5.setText("Cover Image");

        txtcoverimg.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N

        jButton3.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jButton3.setText("Select Cover Image");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jButton4.setText("Save");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jLabel8.setText("Cover Image");

        jLabel9.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jLabel9.setText("Final Data Image");

        jTabbedPane2.setEnabled(false);

        jLabel4.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Secret Key");

        txtkey.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N

        txttext.setColumns(20);
        txttext.setRows(5);
        jScrollPane1.setViewportView(txttext);

        jButton1.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jButton1.setText("Encrypt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        txtenctext.setColumns(20);
        txtenctext.setRows(5);
        jScrollPane2.setViewportView(txtenctext);

        jButton8.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jButton8.setText("Generate Key");
        jButton8.setAlignmentY(0.0F);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout txttabLayout = new javax.swing.GroupLayout(txttab);
        txttab.setLayout(txttabLayout);
        txttabLayout.setHorizontalGroup(
            txttabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(txttabLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
                .addGroup(txttabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, txttabLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68))
                    .addGroup(txttabLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(txttabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(txttabLayout.createSequentialGroup()
                                .addGroup(txttabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtkey, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(txttabLayout.createSequentialGroup()
                                        .addGap(56, 56, 56)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, txttabLayout.createSequentialGroup()
                                .addComponent(jButton8)
                                .addGap(58, 58, 58)))))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        txttabLayout.setVerticalGroup(
            txttabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(txttabLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(txttabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(txttabLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtkey, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29))
        );

        jTabbedPane2.addTab("", txttab);

        jLabel14.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jLabel14.setText("Secrete Key");

        txtkey2.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N

        jButton9.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jButton9.setText("Encrypt");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jButton11.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jButton11.setText("Generate Key");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout imagetabLayout = new javax.swing.GroupLayout(imagetab);
        imagetab.setLayout(imagetabLayout);
        imagetabLayout.setHorizontalGroup(
            imagetabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imagetabLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(txtoriginalimg1, javax.swing.GroupLayout.PREFERRED_SIZE, 392, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(imagetabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imagetabLayout.createSequentialGroup()
                        .addGroup(imagetabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtkey2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(imagetabLayout.createSequentialGroup()
                                .addGap(56, 56, 56)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(77, 77, 77))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imagetabLayout.createSequentialGroup()
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(121, 121, 121))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, imagetabLayout.createSequentialGroup()
                        .addComponent(jButton11)
                        .addGap(110, 110, 110)))
                .addComponent(txtencryptimg1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
        );
        imagetabLayout.setVerticalGroup(
            imagetabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(imagetabLayout.createSequentialGroup()
                .addGroup(imagetabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(imagetabLayout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtkey2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(imagetabLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(imagetabLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtencryptimg1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtoriginalimg1, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("", imagetab);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSelectedFiles)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(28, 28, 28))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtoriginalimg, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(128, 128, 128)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(799, 799, 799)
                        .addComponent(txtencryptimg, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(txtcover, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtfinalimg, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(268, 268, 268)
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtcoverimg)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSelectedFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 22, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtencryptimg, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtoriginalimg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtcoverimg, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtcover, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtfinalimg, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Sender", jPanel1);

        jLabel6.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jLabel6.setText("Select Image File");

        txtSelectedFiles1.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N

        jButton5.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jButton5.setText("Browse");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jLabel7.setText("Secrete Key");

        txtkey1.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N

        jButton6.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jButton6.setText("Decrypt");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jButton7.setText("Getdata");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jTabbedPane3.setEnabled(false);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane3.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 655, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("", jPanel2);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(169, Short.MAX_VALUE)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(235, 235, 235))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane3.addTab("", jPanel4);

        jTabbedPane4.setEnabled(false);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane4.setViewportView(jTextArea2);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 875, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
        );

        jTabbedPane4.addTab("", jPanel5);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(265, 265, 265)
                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(208, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane4.addTab("", jPanel6);

        jButton10.setFont(new java.awt.Font("Lucida Bright", 1, 14)); // NOI18N
        jButton10.setText("Save");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(txtrecdataimg, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 660, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(81, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jTabbedPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 880, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(txtSelectedFiles1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(68, 68, 68))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtkey1, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(269, 269, 269))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtSelectedFiles1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE))
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(txtrecdataimg, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtkey1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jTabbedPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(149, 149, 149))))
        );

        jTabbedPane1.addTab("Receiver", jPanel3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser fileChooser = new JFileChooser(".");
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fileChooser.setAcceptAllFileFilterUsed(true);
            txtkey.setText("");
            int i = fileChooser.showDialog(this, "Select File");
            if (i == 0) {
                String ky = key.passer();
                File file = fileChooser.getSelectedFile();
                txtoriginalimg1.setIcon(null);
                txtSelectedFiles.setText(file.getCanonicalPath());
                String filename = file.getPath();
                if (filename.endsWith("txt")) {
                    filetype = "t";
                    jTabbedPane2.setSelectedIndex(0);
                    jLabel2.setText("Original Text");
                    txttext.setVisible(true);
                    BufferedReader br = null;
                    try {
                        String print = "";
                        br = new BufferedReader(new FileReader(file.getCanonicalPath()));
                        String str;
                        try {
                            while ((str = br.readLine()) != null) {
                                print = print + str + "\n";
                            }
                            txttext.setText(print.replaceAll("(.{50})", "$1\n"));
                        } catch (Exception ex) {
                        }
                    } catch (Exception ex) {
                    }
                } else if (filename.endsWith(".jpg") || filename.endsWith(".png") || filename.endsWith(".gif") || filename.endsWith(".bmp")) {
                    try {
                        filetype = "i";
                        jTabbedPane2.setSelectedIndex(1);
                        jLabel2.setText("Original Image");
                        txttext.setVisible(false);
                        txtoriginalimg1.setIcon(new ImageIcon(filename));
                        ipath = file.getAbsolutePath();
//                        Image bi = ImageIO.read(file);
//                        txtoriginalimg1.setIcon(new ImageIcon(bi.getScaledInstance(190, 190, 190)));
                    } catch (Exception ex) {
                    }
                }
            }
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String key = txtkey.getText();
        if (key.length() < 8) {
            JOptionPane.showMessageDialog(this, "Enter Proper Key", "Error", JOptionPane.ERROR_MESSAGE);
            txtkey.grabFocus();
            return;
        }
        String data = txttext.getText();
        if (data.length() < 8 || txtSelectedFiles.getText().length() < 0) {
            JOptionPane.showMessageDialog(this, "Plsest select file or enter smoe text then encrypt", "Error", JOptionPane.ERROR_MESSAGE);
            txttext.grabFocus();
            return;
        }

        new EncryptFile(key);
        File file = new File(txtSelectedFiles.getText());
        File udir = new File("./" + Login.LoginPage.orgusername);
        udir.mkdir();

        String encfilepath = "./" + Login.LoginPage.orgusername + "/" + file.getName();
        EncryptFile.encrypt(txtSelectedFiles.getText(), encfilepath);

        if (encfilepath.endsWith("txt")) {
            jLabel3.setText("Encrypted Text");
            txtencryptimg1.setIcon(null);
            txtenctext.setVisible(true);
            BufferedReader br = null;
            try {
                String print = "";
                br = new BufferedReader(new FileReader(encfilepath));
                String str;
                while ((str = br.readLine()) != null) {
                    print = print + str + "\n";
                }
                txtenctext.setText(print.replaceAll("(.{100})", "$1\n"));
            } catch (Exception ex) {
            }
            jButton3.setEnabled(true);
        }

//        if () {
//
//        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser fileChooser = new JFileChooser(".");
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fileChooser.setAcceptAllFileFilterUsed(true);
            int i = fileChooser.showDialog(this, "Select Cover Image File");
            if (i == 0) {
                File file = fileChooser.getSelectedFile();
                txtcoverimg.setText(file.getCanonicalPath());
                String filename = file.getPath();
                if (filename.endsWith(".jpg") || filename.endsWith(".png") || filename.endsWith(".bmp")) {
                    txtcover.setIcon(new ImageIcon(filename));
                    if (filetype.equals("t")) {
                        Hidetext();
                        jButton3.setEnabled(false);
                        jButton4.setEnabled(true);
                    } else if (filetype.equals("i")) {
                        jButton3.setEnabled(false);
                        jButton4.setEnabled(true);
                        pe = new Process((ImageIcon) txtcover.getIcon());
                        boolean success = pe.setTextBuffer(getBuffer());
                        if (success) {
                            if (ipath != null) {
                                pe.setImage((ImageIcon) txtoriginalimg1.getIcon(), "png");
                            }
                            if (Process.process) {
                                setSteganoImage(pe.mergeData());
                                System.out.println("Message merged successfully....");
                                File outputfile = new File(ipath);
                                String name = outputfile.getName();
                                ImageIcon ico = (ImageIcon) txtfinalimg.getIcon();
                                ps = new Process(ico);
                                ps.saveImage(ico, "./" + name, "png");
                                JOptionPane.showMessageDialog(this, "Process Done");
                            } else {
                                System.exit(0);
                            }
                        }
                    }
                } else {

                }
            }
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        try {
            JFileChooser fileChooser = new JFileChooser(".");
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
            fileChooser.setAcceptAllFileFilterUsed(true);
            int i = fileChooser.showDialog(this, "Select Image File");
            if (i == 0) {
                File file = fileChooser.getSelectedFile();
                txtSelectedFiles1.setText(file.getCanonicalPath());
                String filename = file.getPath();
                if (filename.endsWith(".PNG") || filename.endsWith(".png")) {
                    jButton7.setEnabled(true);
                    txtrecdataimg.setIcon(new ImageIcon(filename));
                    String fname = file.getName();
                    ftype = fname.substring(fname.length() - 5, fname.indexOf("."));
//                Image bi = ImageIO.read(file);
//                txtrecdataimg.setIcon(new ImageIcon(bi.getScaledInstance(190, 190, 190)));
                } else {
                    JOptionPane.showMessageDialog(this, "Select Image File only !!!");
                }
            }
        } catch (Exception ex) {
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        String key = txtkey1.getText();
        if (key.length() < 8) {
            JOptionPane.showMessageDialog(this, "Enter Proper Key", "Error", JOptionPane.ERROR_MESSAGE);
            txtkey2.grabFocus();
            return;
        }

        if (ftype.equals("t")) {
            jTabbedPane3.setSelectedIndex(0);
            jTabbedPane4.setSelectedIndex(0);
            getenctext(txtSelectedFiles1.getText());
        } else if (ftype.equals("i")) {
            jTabbedPane3.setSelectedIndex(1);
            jTabbedPane4.setSelectedIndex(1);
            ImageIcon ico = (ImageIcon) txtrecdataimg.getIcon();
            pd = new Process(ico);
            int cbuf[] = pd.getBuffer();
            setText(cbuf);
            if (cbuf != null) {
                if (pd.getImage() != null) {
                    ico = pd.getImage();
                    ext = pd.getExtension();
                    jLabel11.setIcon(ico);
                }
                jButton6.setEnabled(false);
                jButton10.setEnabled(true);
            } else {
                JOptionPane.showMessageDialog(new JFrame(), "              Invalid Key \n Please enter correct key & Try Again", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        jButton7.setEnabled(false);
        if (ftype.equals("t")) {
            try {
                jTabbedPane3.setSelectedIndex(0);
                jTabbedPane4.setSelectedIndex(0);
                String print = "";
                BufferedReader br = new BufferedReader(new FileReader(txtSelectedFiles1.getText()));
                String str;
                int i = 0;
                while ((str = br.readLine()) != null) {
                    print = print + str + "\n";
                    i++;
                    if (i > 10) {
                        break;
                    }
                }
                jTextArea1.setText(print);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (ftype.equals("i")) {
            jTabbedPane3.setSelectedIndex(1);
            jTabbedPane4.setSelectedIndex(1);
            try {
                File f = new File("./0.png");
                Image bi = ImageIO.read(f);
                jLabel10.setIcon(new ImageIcon(bi.getScaledInstance(190, 190, 190)));
            } catch (IOException ex) {
            }
        }
        jButton6.setEnabled(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = chooser.showSaveDialog(this);
        if (result == JFileChooser.CANCEL_OPTION) {
            return;
        }
        File temp = chooser.getSelectedFile();
        if (temp.getName().equals("")) {
            JOptionPane.showMessageDialog(this, "Invalid File Name", "Invalid File Name", JOptionPane.ERROR_MESSAGE);
        } else {
            String name = temp.getPath();
            if (filetype.equals("t")) {
                try {
                    jButton4.setEnabled(false);
                    FileUtils.copyFile(new File("./1t.png"), new File(name + "t.png"));
                    JOptionPane.showMessageDialog(this, "File Saved successfully", "Information message", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                }
            } else if (filetype.equals("i")) {
                try {
                    jButton4.setEnabled(false);
                    ImageIcon ico = (ImageIcon) txtfinalimg.getIcon();
                    ps = new Process(ico);
                    ps.saveImage(ico, name + filetype, "png");
                    JOptionPane.showMessageDialog(this, "File Saved successfully", "Information message", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception ex) {
                }
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        String key = txtkey2.getText();
        if (key.length() < 8) {
            JOptionPane.showMessageDialog(this, "Enter Proper Key", "Error", JOptionPane.ERROR_MESSAGE);
            txtkey2.grabFocus();
            return;
        }

        String data = txtSelectedFiles.getText();
        if (data.length() < 0) {
            JOptionPane.showMessageDialog(this, "Plsest select file to encrypt", "Error", JOptionPane.ERROR_MESSAGE);
            txttext.grabFocus();
            return;
        }

        new EncryptFile(key);
        File file = new File(txtSelectedFiles.getText());
        File udir = new File("./" + Login.LoginPage.orgusername);
        udir.mkdir();

        String encfilepath = "./" + Login.LoginPage.orgusername + "/" + file.getName();
        EncryptFile.encrypt(txtSelectedFiles.getText(), encfilepath);

        if (encfilepath.endsWith(".jpg") || encfilepath.endsWith(".png") || encfilepath.endsWith(".gif") || encfilepath.endsWith(".bmp")) {
            try {
                jLabel3.setText("Encrypted Image");
                File f = new File("./0.png");
                Image bi = ImageIO.read(f);
                txtencryptimg1.setIcon(new ImageIcon(bi.getScaledInstance(190, 190, 190)));
            } catch (Exception ex) {
            }
        }
        jButton3.setEnabled(true);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int result = chooser.showSaveDialog(this);
        if (result == JFileChooser.CANCEL_OPTION) {
            return;
        }
        File temp = chooser.getSelectedFile();
        if (temp.getName().equals("")) {
            JOptionPane.showMessageDialog(this, "Invalid File Name", "Invalid File Name", JOptionPane.ERROR_MESSAGE);
        } else {
            String name = temp.getPath();
            if (ftype.equals("t")) {
                try {
                    FileUtils.writeStringToFile(new File(name), jTextArea2.getText());
                    jButton10.setEnabled(false);
                    JOptionPane.showMessageDialog(this, "File Saved successfully", "Information message", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } else if (ftype.equals("i")) {
                try {
                    ImageIcon ico = (ImageIcon) jLabel11.getIcon();
                    ps = new Process(ico);
                    ps.saveImage(ico, name + ftype, "png");
                    jButton10.setEnabled(false);
                    JOptionPane.showMessageDialog(this, "File Saved successfully", "Information message", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception ex) {
                }
            }
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try {
            // TODO add your handling code here:
            txtkey.setText("");
            String ky = key.passer();
            txtkey.setText(ky);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            txtkey2.setText("");
            String ky = key.passer();
            txtkey2.setText(ky);
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel imagetab;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTabbedPane jTabbedPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField txtSelectedFiles;
    private javax.swing.JTextField txtSelectedFiles1;
    private javax.swing.JLabel txtcover;
    private javax.swing.JTextField txtcoverimg;
    private javax.swing.JLabel txtencryptimg;
    private javax.swing.JLabel txtencryptimg1;
    private javax.swing.JTextArea txtenctext;
    private javax.swing.JLabel txtfinalimg;
    private javax.swing.JTextField txtkey;
    public static javax.swing.JTextField txtkey1;
    public static javax.swing.JTextField txtkey2;
    private javax.swing.JLabel txtoriginalimg;
    private javax.swing.JLabel txtoriginalimg1;
    private javax.swing.JLabel txtrecdataimg;
    private javax.swing.JPanel txttab;
    private javax.swing.JTextArea txttext;
    // End of variables declaration//GEN-END:variables

    public void Hidetext() {
        String imageName = txtcoverimg.getText();
        String cipherData = txttext.getText();
        if (cipherData.length() < 3) {
            JOptionPane.showMessageDialog(this, "First Select Secret Data & Encrypt!!");
        } else if (imageName.length() < 1) {
            JOptionPane.showMessageDialog(this, "First Select Image File!!");
        } else {
            try {
                String key = txtkey.getText();
                cipherData = key + "&&&&&" + cipherData;
                int textLength = cipherData.length();

                int first = (int) textLength / 3;
                int second = first * 2;
                int third = textLength;

                String firstString = cipherData.substring(0, first);
                String secondString = cipherData.substring(first, second);
                String thirdString = cipherData.substring(second, third);

                //System.out.println("F : " + firstString + " S : " + secondString + " T : " + thirdString);
                String binaryFirst = getBinaryOfString(firstString);
                String binarySecond = getBinaryOfString(secondString);
                String binaryThird = getBinaryOfString(thirdString);

                //System.out.println("F : " + binaryFirst.length() + " S : " + binarySecond.length() + " T : " + binaryThird.length());
                File f = new File(imageName);
                BufferedImage imgBuffer = ImageIO.read(f);

                int[][] pixels = new int[imgBuffer.getWidth()][imgBuffer.getHeight()];
                int[][] redPixel = new int[imgBuffer.getWidth()][imgBuffer.getHeight()];
                int[][] greenPixel = new int[imgBuffer.getWidth()][imgBuffer.getHeight()];
                int[][] bluePixel = new int[imgBuffer.getWidth()][imgBuffer.getHeight()];

                int width = imgBuffer.getWidth();
                int height = imgBuffer.getHeight();

                System.out.println("Width : " + width + "  Height :" + height);

                for (int x = 0; x < width; x++) {
                    for (int y = 0; y < height; y++) {
                        pixels[x][y] = imgBuffer.getRGB(x, y);
                        redPixel[x][y] = (pixels[x][y] >> 16) & 0xff;
                        greenPixel[x][y] = (pixels[x][y] >> 8) & 0xff;
                        bluePixel[x][y] = (pixels[x][y]) & 0xff;

                        //System.out.println("P : "+pixels[x][y]+" R : "+redPixel[x][y]+" G : "+greenPixel[x][y]+" B : "+bluePixel[x][y]);
                    }
                }

                redPixel = setPart(redPixel, binaryFirst, width, height, "R");
                greenPixel = setPart(greenPixel, binarySecond, width, height, "G");
                bluePixel = setPart(bluePixel, binaryThird, width, height, "B");

                int c = 1;
                BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
                for (int x = 0; x < width; x++) {
                    for (int y = 0; y < height; y++) {

                        int pixel = ((redPixel[x][y] & 0x0ff) << 16) | ((greenPixel[x][y] & 0x0ff) << 8) | (bluePixel[x][y] & 0x0ff);
                        //System.out.println(c+" : "+pixel+" : "+redPixel[x][y]+" : "+greenPixel[x][y]+" : "+bluePixel[x][y]);
                        image.setRGB(x, y, pixel);
                        c++;
                    }
                }

                int index = imageName.lastIndexOf("\\");
                String outName = imageName.substring(index + 1, imageName.length());
                index = outName.lastIndexOf(".");
                outName = outName.substring(0, index);

                File outputfile = new File("./1t.png");
                ImageIO.write(image, "png", outputfile);
                String details = binaryFirst.length() + "," + binarySecond.length() + "," + binaryThird.length();
                details = details + "," + lastRed + "," + lastGreen + "," + lastBlue;
                addEndDetails(details, "./1t.png");
                try {
                    File f1 = new File("./1t.png");
                    txtfinalimg.setIcon(new ImageIcon(f1.getName()));
                } catch (Exception ex) {
                }
                JOptionPane.showMessageDialog(this, "Data Hiding Done");
            } catch (IOException | HeadlessException e) {
            }
        }
    }

    public void getenctext(String filename) {
        try {
            File file = new File(filename);

            BufferedImage imgBuffer = ImageIO.read(file);

            int[][] pixels = new int[imgBuffer.getWidth()][imgBuffer.getHeight()];
            int[][] redPixel = new int[imgBuffer.getWidth()][imgBuffer.getHeight()];
            int[][] greenPixel = new int[imgBuffer.getWidth()][imgBuffer.getHeight()];
            int[][] bluePixel = new int[imgBuffer.getWidth()][imgBuffer.getHeight()];

            int width = imgBuffer.getWidth();
            int height = imgBuffer.getHeight();

            int c = 1;
            for (int x = 0; x < width; x++) {
                for (int y = 0; y < height; y++) {
                    pixels[x][y] = imgBuffer.getRGB(x, y);
                    redPixel[x][y] = (pixels[x][y] >> 16) & 0xff;
                    greenPixel[x][y] = (pixels[x][y] >> 8) & 0xff;
                    bluePixel[x][y] = (pixels[x][y]) & 0xff;
                    //System.out.println(c+"  P : "+pixels[x][y]+" R : "+redPixel[x][y]+" G : "+greenPixel[x][y]+" B : "+bluePixel[x][y]);
                    c++;
                }
            }

            String details = getEndDetails(filename);

            String[] split = details.split(",");

            int redEnd = Integer.parseInt(split[0]);
            int greenEnd = Integer.parseInt(split[1]);
            int blueEnd = Integer.parseInt(split[2]);
            int redLast = Integer.parseInt(split[3]);
            int greenLast = Integer.parseInt(split[4]);
            int blueLast = Integer.parseInt(split[5]);

            System.out.println("R : " + redEnd + " G : " + greenEnd + " B : " + blueEnd);

            String red = getPart(redPixel, width, height, redEnd, redLast);
            String green = getPart(greenPixel, width, height, greenEnd, greenLast);
            String blue = getPart(bluePixel, width, height, blueEnd, blueLast);

            String full = red + green + blue;
            String[] alldata = full.split("&&&&&");
            String key = txtkey1.getText();
            String key2 = alldata[0];
            if (key.equals(key2)) {
                jTextArea2.setText(alldata[1]);
                jButton10.setEnabled(true);
                jButton6.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(new JFrame(), "              Invalid Key \n Please enter correct key & Try Again", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void addEndDetails(String details, String filename) {
        try {
            File file = new File(filename);
            InputStream insputStream = new FileInputStream(file);
            long length = file.length();

            byte[] inFileByte = new byte[(int) length];
            insputStream.read(inFileByte);
            insputStream.close();

            long detailsLen = details.length();

            byte[] detailsByte = new byte[(int) detailsLen];

            byte[] len = new byte[80];
            String ss = details + "";

            if (ss.length() < 80) {
                ss = ss + "@";
            }

            for (int i = 0; i < ss.length(); i++) {
                len[i] = (byte) ss.charAt(i);
            }

            byte[] combined = new byte[inFileByte.length + len.length];
            System.arraycopy(inFileByte, 0, combined, 0, inFileByte.length);
            System.arraycopy(len, 0, combined, inFileByte.length, len.length);

            file.delete();

            FileOutputStream fos = new FileOutputStream(filename);
            fos.write(combined);
            fos.flush();
            fos.close();

        } catch (Exception e) {
        }
    }

    public int[][] setPart(int[][] values, String data, int width, int height, String LastColor) {

        System.out.println("Data : " + data);
        int count = 1;
        boolean done = false;
        String full = "";
        int oldPosition = 0, newPosition = 0;
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                if (y != (height - 1)) {
                    int diff = values[x][y] - values[x][y + 1];
                    if (diff < 0) {
                        diff = diff * -1;
                    }

                    if (newPosition < data.length()) {
                        oldPosition = newPosition;
                        if (diff <= 5) {
                            newPosition = newPosition + 2;
                        } else {
                            newPosition = newPosition + 3;
                        }

                        if (newPosition > data.length()) {
                            newPosition = data.length();
                            int set = newPosition - oldPosition;
                            if (LastColor.equals("R")) {
                                lastRed = set;
                            } else if (LastColor.equals("G")) {
                                lastGreen = set;
                            } else if (LastColor.equals("B")) {
                                lastBlue = set;
                            }
                        }

                        String getdata = data.substring(oldPosition, newPosition);

                        //System.out.println(count+" LSB : "+getdata+"  "+values[x][y]+" : "+values[x][y+1]);
                        full = full + getdata;
                        values[x][y] = embedLSB(values[x][y], getdata);
                        if (diff <= 5) {
                            values[x][y + 1] = embedMarker(values[x][y + 1], "0");
                        } else {
                            values[x][y + 1] = embedMarker(values[x][y + 1], "1");
                        }
                        y++;
                        count++;

                        //System.out.println(values[x][y]+" : "+values[x][y+1]);
                    } else {
                        done = true;
                        break;
                    }
                }
            }
            if (done) {
                break;
            }
        }
        System.out.println("New : " + newPosition);

        return values;
    }

    public String getBinaryOfString(String data) {
        String binary = "";

        for (int i = 0; i < data.length(); i++) {
            char ch = data.charAt(i);
            String charstring = Integer.toBinaryString(ch);
            charstring = make8bits(charstring);

            binary = binary + charstring;
        }

        return binary;
    }

    public int[] getReadPixel(byte[] pix) {
        int[] p = new int[pix.length];

        for (int i = 0; i < pix.length; i++) {
            int red = (pix[i] >> 16) & 0xff;
            p[i] = red;
        }
        return p;
    }

    public int[] getGreenPixel(byte[] pix) {
        int[] p = new int[pix.length];

        for (int i = 0; i < pix.length; i++) {
            int green = (pix[i] >> 8) & 0xff;
            p[i] = green;
        }
        return p;
    }

    public int[] getBluePixel(byte[] pix) {
        int[] p = new int[pix.length];

        for (int i = 0; i < pix.length; i++) {
            int blue = (pix[i]) & 0xff;
            p[i] = blue;
        }
        return p;
    }

    public void printPixelARGB(byte pixel) {
        int alpha = (pixel >> 24) & 0xff;
        int red = (pixel >> 16) & 0xff;
        int green = (pixel >> 8) & 0xff;
        int blue = (pixel) & 0xff;

        System.out.println("R : " + red + " G : " + green + " B : " + blue);

        String redstr = Integer.toBinaryString(red);
        String greenstr = Integer.toBinaryString(green);
        String bluestr = Integer.toBinaryString(blue);

        redstr = make8bits(redstr);
        greenstr = make8bits(greenstr);
        bluestr = make8bits(bluestr);
    }

    public int embedLSB(int value, String binary) {
        int newPixel = 0;

        String valuebinary = Integer.toBinaryString(value);
        valuebinary = make8bits(valuebinary);

        if (binary.length() == 1) {
            valuebinary = valuebinary.substring(0, 7) + binary;
        } else if (binary.length() == 2) {
            valuebinary = valuebinary.substring(0, 6) + binary;
        } else if (binary.length() == 3) {
            valuebinary = valuebinary.substring(0, 5) + binary;
        }

        newPixel = Integer.parseInt(valuebinary, 2);

        return newPixel;
    }

    public int embedMarker(int value, String binary) {
        int newPixel = 0;

        String valuebinary = Integer.toBinaryString(value);
        valuebinary = make8bits(valuebinary);

        valuebinary = valuebinary.substring(0, 7) + binary;

        newPixel = Integer.parseInt(valuebinary, 2);

        return newPixel;
    }

    public static String make8bits(String text) {
        for (int i = text.length(); i < 8; i++) {
            //text+="0";
            text = "0" + text;
        }
        return text;
    }

    public String getPart(int[][] values, int width, int height, int endDetails, int lastDetails) {

        boolean done = false;
        String data = "";
        int count = 1;
        for (int x = 0; x < width; x++) {
            for (int y = 0; y < height; y++) {
                if (y != (height - 1)) {

                    String getData = extractLSB(values[x][y], values[x][y + 1]);
                    //System.out.println(count+" LSB : "+getData);
                    data = data + getData;

                    if (data.length() >= endDetails) {
                        int getDataLen = getData.length();

                        if (lastDetails != getDataLen) {
                            if (lastDetails != 0) {
                                data = data.substring(0, data.length() - getDataLen);
                            }

                            String s = extractLastLSB(values[x][y], lastDetails);
                            data = data + s;
                        }

                        done = true;
                        break;
                    }
                    y++;
                    count++;
                }
            }
            if (done) {
                break;
            }
        }
        System.out.println("Data : " + data);

        data = getStringOfBinary(data);
        System.out.println("Data : " + data);

        return data;
    }

    public String extractLSB(int value, int marker) {
        String lsb = "";

        String valuebinary = Integer.toBinaryString(value);
        valuebinary = recmake8bits(valuebinary);

        String markerbinary = Integer.toBinaryString(marker);
        //System.out.println(marker+" Marker : "+markerbinary);
        markerbinary = recmake8bits(markerbinary);

        String chk = markerbinary.substring(7, 8);

        if (chk.equals("0")) {
            lsb = valuebinary.substring(6, 8);
        } else if (chk.equals("1")) {
            lsb = valuebinary.substring(5, 8);
        }
        return lsb;
    }

    public String extractLastLSB(int value, int range) {
        String lsb = "";

        String valuebinary = Integer.toBinaryString(value);
        valuebinary = recmake8bits(valuebinary);

        int start = 8 - range;
        lsb = valuebinary.substring(start, 8);

        return lsb;
    }

    public static String recmake8bits(String text) {
        for (int i = text.length(); i < 8; i++) {
            //text+="0";
            text = "0" + text;
        }
        return text;
    }

    public String getStringOfBinary(String binary) {
        String data = "";

        for (int i = 0; i < binary.length(); i += 8) {

            int start = i;
            int end = i + 8;
            String str = binary.substring(start, end);
            char ch = (char) Integer.parseInt(str, 2);

            data = data + ch;
        }
        return data;
    }

    public String getEndDetails(String filename) {
        String details = "";
        try {
            File file = new File(filename);
            InputStream insputStream = new FileInputStream(file);
            long length = file.length();

            byte[] inFileByte = new byte[(int) length];
            insputStream.read(inFileByte);
            insputStream.close();

            int len = inFileByte.length - 80;

            String ss = "";

            for (int i = len; i < inFileByte.length; i++) {
                ss = ss + (char) inFileByte[i];
            }

            for (int i = 0; i < 80; i++) {
                if (ss.charAt(i) == '@') {
                    ss = ss.substring(0, i);
                    break;
                }
            }
            details = ss;

        } catch (Exception e) {
        }
        return details;
    }

    public int[] getBuffer() {
        String text = tp.getText();
        int len = text.length() + 16;

        int x, y, z;

        x = len / 10000;
        y = len / 100 - x * 100;
        z = len - (x * 10000 + y * 100);

        buf = new int[len + 16];
        buf[0] = x;
        buf[1] = y;
        buf[2] = z;

        char str[] = new char[len];
        for (int i = 0; i < text.length(); i++) {
            buf[i + 16] = text.charAt(i);
        }
        return buf;
    }

    public void setSteganoImage(ImageIcon ico) {
        txtfinalimg.setIcon(ico);
    }

    public void setText(int cbuf[]) {
        tp.setText("");
        if (cbuf != null) {
            for (int i = 0; i < cbuf.length; i++) {
                tp.append(String.valueOf((char) cbuf[i]));
            }
        }
    }
}
